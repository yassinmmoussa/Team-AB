"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

<<<<<<< HEAD
function _helperPluginUtils() {
  const data = require("@babel/helper-plugin-utils");

  _helperPluginUtils = function () {
    return data;
  };

  return data;
}

function _core() {
  const data = require("@babel/core");

  _core = function () {
    return data;
  };

  return data;
}

function getName(key) {
  if (_core().types.isIdentifier(key)) {
=======
var _helperPluginUtils = require("@babel/helper-plugin-utils");

var _core = require("@babel/core");

function getName(key) {
  if (_core.types.isIdentifier(key)) {
>>>>>>> 0ae1a948acc774b725d2813ed0b826c52e048967
    return key.name;
  }

  return key.value.toString();
}

<<<<<<< HEAD
var _default = (0, _helperPluginUtils().declare)(api => {
=======
var _default = (0, _helperPluginUtils.declare)(api => {
>>>>>>> 0ae1a948acc774b725d2813ed0b826c52e048967
  api.assertVersion(7);
  return {
    name: "transform-duplicate-keys",
    visitor: {
      ObjectExpression(path) {
        const {
          node
        } = path;
<<<<<<< HEAD
        const plainProps = node.properties.filter(prop => !_core().types.isSpreadElement(prop) && !prop.computed);
=======
        const plainProps = node.properties.filter(prop => !_core.types.isSpreadElement(prop) && !prop.computed);
>>>>>>> 0ae1a948acc774b725d2813ed0b826c52e048967
        const alreadySeenData = Object.create(null);
        const alreadySeenGetters = Object.create(null);
        const alreadySeenSetters = Object.create(null);

        for (const prop of plainProps) {
          const name = getName(prop.key);
          let isDuplicate = false;

          switch (prop.kind) {
            case "get":
              if (alreadySeenData[name] || alreadySeenGetters[name]) {
                isDuplicate = true;
              }

              alreadySeenGetters[name] = true;
              break;

            case "set":
              if (alreadySeenData[name] || alreadySeenSetters[name]) {
                isDuplicate = true;
              }

              alreadySeenSetters[name] = true;
              break;

            default:
              if (alreadySeenData[name] || alreadySeenGetters[name] || alreadySeenSetters[name]) {
                isDuplicate = true;
              }

              alreadySeenData[name] = true;
          }

          if (isDuplicate) {
            prop.computed = true;
<<<<<<< HEAD
            prop.key = _core().types.stringLiteral(name);
=======
            prop.key = _core.types.stringLiteral(name);
>>>>>>> 0ae1a948acc774b725d2813ed0b826c52e048967
          }
        }
      }

    }
  };
});

exports.default = _default;